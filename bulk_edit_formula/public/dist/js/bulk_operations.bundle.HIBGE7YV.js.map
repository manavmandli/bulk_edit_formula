{
  "version": 3,
  "sources": ["../../../../../apps/bulk_edit_formula/bulk_edit_formula/public/js/bulk_operations.bundle.js"],
  "sourcesContent": ["// frappe.provide(\"frappe.views.bulk_operations\");\n\n// frappe.views.bulk_operations.edit = function (docnames, field_mappings, done) {\n//     console.log(\"Bulk Edit\", docnames, field_mappings);\n//     let field_options = Object.keys(field_mappings).sort(function (a, b) {\n//         return __(cstr(field_mappings[a].label)).localeCompare(\n//             cstr(__(field_mappings[b].label))\n//         );\n//     });\n//     const status_regex = /status/i;\n//     const numeric_fieldtypes = [\"Int\", \"Float\", \"Currency\", \"Percent\"];\n\n//     const default_field = field_options.find((value) => status_regex.test(value));\n\n//     const dialog = new frappe.ui.Dialog({\n//         title: __(\"Bulk Edit\"),\n//         fields: [\n//             {\n//                 fieldtype: \"Select\",\n//                 options: field_options,\n//                 default: default_field,\n//                 label: __(\"Field\"),\n//                 fieldname: \"field\",\n//                 reqd: 1,\n//                 onchange: () => {\n//                     set_value_field(dialog);\n//                 },\n//             },\n//             {\n//                 fieldtype: \"Data\",\n//                 label: __(\"Value\"),\n//                 fieldname: \"value\",\n//                 onchange() {\n//                     show_help_text();\n//                 },\n//             },\n//         ],\n//         primary_action: ({ value }) => {\n//             const fieldname = field_mappings[dialog.get_value(\"field\")].fieldname;\n//             dialog.disable_primary_action();\n//             frappe\n//                 .call({\n//                     method: \"frappe.desk.doctype.bulk_update.bulk_update.submit_cancel_or_update_docs\",\n//                     args: {\n//                         doctype: cur_list.doctype,\n//                         freeze: true,\n//                         docnames: docnames,\n//                         action: \"update\",\n//                         data: {\n//                             [fieldname]: value || null,\n//                         },\n//                     },\n//                 })\n//                 .then((r) => {\n//                     let failed = r.message || [];\n\n//                     if (failed.length && !r._server_messages) {\n//                         dialog.enable_primary_action();\n//                         frappe.throw(\n//                             __(\"Cannot update {0}\", [\n//                                 failed.map((f) => (f.bold ? f.bold() : f)).join(\", \"),\n//                             ])\n//                         );\n//                     }\n//                     done();\n//                     dialog.hide();\n//                     frappe.show_alert(__(\"Updated successfully\"));\n//                 });\n//         },\n//         primary_action_label: __(\"Update {0} records\", [docnames.length]),\n//     });\n\n//     if (default_field) set_value_field(dialog); // to set `Value` df based on default `Field`\n//     show_help_text();\n\n//     function set_value_field(dialogObj) {\n//         const new_df = Object.assign({}, field_mappings[dialogObj.get_value(\"field\")]);\n//         /* if the field label has status in it and\n//         if it has select fieldtype with no default value then\n//         set a default value from the available option. */\n//         if (\n//             new_df.label.match(status_regex) &&\n//             new_df.fieldtype === \"Select\" &&\n//             !new_df.default\n//         ) {\n//             let options = [];\n//             if (typeof new_df.options === \"string\") {\n//                 options = new_df.options.split(\"\\n\");\n//             }\n//             //set second option as default if first option is an empty string\n//             new_df.default = options[0] || options[1];\n//         }\n//         new_df.label = __(\"Value\");\n//         new_df.onchange = show_help_text;\n\n//         if (numeric_fieldtypes.includes(new_df.fieldtype)) {\n//             new_df.fieldtype = \"Data\";\n//         }\n\n//         delete new_df.depends_on;\n//         dialogObj.replace_field(\"value\", new_df);\n//         show_help_text();\n//     }\n\n//     function show_help_text() {\n//         let value = dialog.get_value(\"value\");\n//         let fieldname = dialog.get_value(\"field\");\n//         let fieldtype = field_mappings[fieldname]?.fieldtype;\n\n//         if (value == null || value === \"\") {\n//             if (numeric_fieldtypes.includes(fieldtype)) {\n//                 dialog.set_df_property(\n//                     \"value\",\n//                     \"description\",\n//                     __(\"Enter a number or formula (e.g. =*2, +10, /3)\")\n//                 );\n//             }\n//             else{\n//                 dialog.set_df_property(\n//                     \"value\",\n//                     \"description\",\n//                     __(\"You have not entered a value. The field will be set to empty.\")\n//                 );\n//             }\n//         } else {\n//             dialog.set_df_property(\"value\", \"description\", \"\");\n//         }\n//     }\n\n//     dialog.refresh();\n//     dialog.show();\n// };\n\nimport BulkOperations from \"frappe/public/js/frappe/list/bulk_operations\";\n\nclass CustomBulkOperations extends frappe.views.BulkOperations  {\n\tedit(docnames, field_mappings, done) {\n\t\tconsole.log(\"Bulk Edit\", docnames, field_mappings);\n\t\tlet field_options = Object.keys(field_mappings).sort(function (a, b) {\n\t\t\treturn __(cstr(field_mappings[a].label)).localeCompare(\n\t\t\t\tcstr(__(field_mappings[b].label))\n\t\t\t);\n\t\t});\n\t\tconst status_regex = /status/i;\n\t\tconst numeric_fieldtypes = [\"Int\", \"Float\", \"Currency\", \"Percent\"];\n\n\t\tconst default_field = field_options.find((value) => status_regex.test(value));\n\n\t\tconst dialog = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Bulk Edit\"),\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Select\",\n\t\t\t\t\toptions: field_options,\n\t\t\t\t\tdefault: default_field,\n\t\t\t\t\tlabel: __(\"Field\"),\n\t\t\t\t\tfieldname: \"field\",\n\t\t\t\t\treqd: 1,\n\t\t\t\t\tonchange: () => {\n\t\t\t\t\t\tset_value_field(dialog);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tlabel: __(\"Value\"),\n\t\t\t\t\tfieldname: \"value\",\n\t\t\t\t\tonchange() {\n\t\t\t\t\t\tshow_help_text();\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprimary_action: ({ value }) => {\n\t\t\t\tconst fieldname = field_mappings[dialog.get_value(\"field\")].fieldname;\n\t\t\t\tdialog.disable_primary_action();\n\t\t\t\tfrappe\n\t\t\t\t\t.call({\n\t\t\t\t\t\tmethod: \"frappe.desk.doctype.bulk_update.bulk_update.submit_cancel_or_update_docs\",\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tdoctype: cur_list.doctype,\n\t\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\t\tdocnames: docnames,\n\t\t\t\t\t\t\taction: \"update\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t[fieldname]: value || null,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then((r) => {\n\t\t\t\t\t\tlet failed = r.message || [];\n\n\t\t\t\t\t\tif (failed.length && !r._server_messages) {\n\t\t\t\t\t\t\tdialog.enable_primary_action();\n\t\t\t\t\t\t\tfrappe.throw(\n\t\t\t\t\t\t\t\t__(\"Cannot update {0}\", [\n\t\t\t\t\t\t\t\t\tfailed.map((f) => (f.bold ? f.bold() : f)).join(\", \"),\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t\tdialog.hide();\n\t\t\t\t\t\tfrappe.show_alert(__(\"Updated successfully\"));\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tprimary_action_label: __(\"Update {0} records\", [docnames.length]),\n\t\t});\n\n\t\tif (default_field) set_value_field(dialog); // to set `Value` df based on default `Field`\n\t\tshow_help_text();\n\n\t\tfunction set_value_field(dialogObj) {\n\t\t\tconst new_df = Object.assign({}, field_mappings[dialogObj.get_value(\"field\")]);\n\t\t\t/* if the field label has status in it and\n\t\t\tif it has select fieldtype with no default value then\n\t\t\tset a default value from the available option. */\n\t\t\tif (\n\t\t\t\tnew_df.label.match(status_regex) &&\n\t\t\t\tnew_df.fieldtype === \"Select\" &&\n\t\t\t\t!new_df.default\n\t\t\t) {\n\t\t\t\tlet options = [];\n\t\t\t\tif (typeof new_df.options === \"string\") {\n\t\t\t\t\toptions = new_df.options.split(\"\\n\");\n\t\t\t\t}\n\t\t\t\t//set second option as default if first option is an empty string\n\t\t\t\tnew_df.default = options[0] || options[1];\n\t\t\t}\n\t\t\tnew_df.label = __(\"Value\");\n\t\t\tnew_df.onchange = show_help_text;\n\n\t\t\tif (numeric_fieldtypes.includes(new_df.fieldtype)) {\n\t\t\t\tnew_df.fieldtype = \"Data\";\n\t\t\t}\n\n\t\t\tdelete new_df.depends_on;\n\t\t\tdialogObj.replace_field(\"value\", new_df);\n\t\t\tshow_help_text();\n\t\t}\n\n\t\tfunction show_help_text() {\n\t\t\tlet value = dialog.get_value(\"value\");\n\t\t\tlet fieldname = dialog.get_value(\"field\");\n\t\t\tlet fieldtype = field_mappings[fieldname]?.fieldtype;\n\n\t\t\tif (value == null || value === \"\") {\n\t\t\t\tif (numeric_fieldtypes.includes(fieldtype)) {\n\t\t\t\t\tdialog.set_df_property(\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t\t\"description\",\n\t\t\t\t\t\t__(\"Enter a number or formula (e.g. =*2, +10, /3)\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdialog.set_df_property(\n\t\t\t\t\t\t\"value\",\n\t\t\t\t\t\t\"description\",\n\t\t\t\t\t\t__(\"You have not entered a value. The field will be set to empty.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdialog.set_df_property(\"value\", \"description\", \"\");\n\t\t\t}\n\t\t}\n\n\t\tdialog.refresh();\n\t\tdialog.show();\n\t}\n}\nfrappe.views.BulkOperations = CustomBulkOperations;"],
  "mappings": "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",
  "names": []
}
